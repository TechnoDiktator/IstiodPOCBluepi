apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: service-c-auth0-jwt  # ✅ Unique name for Service C
  namespace: default
spec:
  selector:
    matchLabels:
      app: service-c
  jwtRules:
  - issuer: "https://dev-s8pk7mul3yw2xy77.us.auth0.com"
    jwksUri: "https://dev-s8pk7mul3yw2xy77.us.auth0.com/.well-known/jwks.json"
---
apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: service-b-auth0-jwt  # ✅ Unique name for Service B
  namespace: default
spec:
  selector:
    matchLabels:
      app: service-b
  jwtRules:
  - issuer: "https://dev-s8pk7mul3yw2xy77.us.auth0.com"
    jwksUri: "https://dev-s8pk7mul3yw2xy77.us.auth0.com/.well-known/jwks.json"
---
apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: service-a-auth0-jwt  # ✅ Unique name for Service A
  namespace: default
spec:
  selector:
    matchLabels:
      app: service-a
  jwtRules:
  - issuer: "https://dev-s8pk7mul3yw2xy77.us.auth0.com"
    jwksUri: "https://dev-s8pk7mul3yw2xy77.us.auth0.com/.well-known/jwks.json"

#  Now, Istio will enforce JWT authentication for both Service C and Service B separately.
#  Requests without a valid JWT token will be blocked before reaching the services.